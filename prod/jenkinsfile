pipeline {
    agent any
    options {
        skipDefaultCheckout true
    }
    environment {
        BASE_IMAGE='node:lts-alpine'

        APP_NAME = 'ack'
        APP_NETWORK = 'app-network'
        APP_PORT = 3000
        
        NODE_JS = 'lts'

        HOST_IP = 'xx.xx.xx.xx'
        HOST_CREDENTIAL = '2637b88f-8dc8-4395-bd6b-0c6127720a89'
        
        DOCKER_CREDENTIAL = 'ef108994-1241-4614-aab5-2aadd7a72284'
        DOCKER_FILE= './docker/dockerfile.prod'
        DOCKER_USERNAME = 'ack'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/' 

        GIT = 'Default'
        GIT_BRANCH = 'main'
        GIT_CREDENTIAL = '86535ad6-5d74-48c0-9852-bddbe1fbaff6'
        GIT_URL = 'https://github.com/andrechristikan/ack-nestjs-mongoose.git'
        
    }
    tools {
        nodejs NODE_JS
        git GIT
    }
    stages {
        stage('Prepare') {
            steps {
                cleanWs()
                checkout scm

                sh 'node --version && npm --version && yarn --version'
                sh 'docker --version'
                sh 'docker ps -a'
                
                script{
                    def nodeContainer = docker.image(BASE_IMAGE)
                    nodeContainer.pull()
                    nodeContainer.inside {
                        sh 'node --version'
                        sh 'npm --version'
                        sh 'yarn --version'
                    }
                }
            }
        }
        stage('Clone') {
            steps {
                git branch: GIT_BRANCH,
                credentialsId: GIT_CREDENTIAL,
                url: GIT_URL

                sh "git rev-parse --short HEAD > .git/commit-id"
            }
        }
        stage('Build'){
            steps{
                script{
                    def commit_id = readFile('.git/commit-id').trim()
                    def app_image = "${DOCKER_USERNAME}/${APP_NAME}-builder:${commit_id}"
                    docker.build(app_image, "--target builder -f ${DOCKER_FILE} .")
                }
            }
        }
        stage('Test') {
            steps {
                script{
                    def commit_id = readFile('.git/commit-id').trim()
                    def app_image = "${DOCKER_USERNAME}/${APP_NAME}-builder:${commit_id}"
                    def container_testing = "${APP_NAME}-testing"

                    try{
                        sh "docker stop ${container_testing} && docker rm ${container_testing}"
                    }catch(e){}

                    try{
                        sh "docker network create ${APP_NETWORK} --driver=bridge"
                    }catch(e){}

                    try{
                        sh "docker run --rm --network ${APP_NETWORK} \
                            -v /app/koinsv3/${APP_NAME}/.env:/app/.env \
                            --name ${container_testing} \
                            ${app_image} \
                            sh -c 'yarn test:e2e'"     
                    }catch(e){}
                }
                
            }
        }
        stage('Push') {
            steps {
                script{
                    def commit_id = readFile('.git/commit-id').trim()
                    def app_image = "${DOCKER_USERNAME}/${APP_NAME}:${commit_id}"
                    
                    def app = docker.build(app_image, "--target main -f ${DOCKER_FILE} .")
                    docker.withRegistry(DOCKER_REGISTRY, DOCKER_CREDENTIAL) {
                        app.push()
                        app.push('latest')
                    }
                }
                
            }
        }
        stage('Deploy') {
            steps {
                script{
                    def commit_id = readFile('.git/commit-id').trim()
                    def app_image = "${DOCKER_USERNAME}/${APP_NAME}:${commit_id}"

                    def remote = [:]
                    remote.name = APP_NAME
                    remote.host = HOST_IP
                    remote.allowAnyHosts = true
                    withCredentials([sshUserPrivateKey(credentialsId: HOST_CREDENTIAL, keyFileVariable: 'IDENTITY', usernameVariable: 'USERNAME')]) {

                        remote.user = USERNAME
                        remote.identityFile = IDENTITY

                        try{
                            sshCommand remote: remote, command: "docker stop ${APP_NAME} && docker rm ${APP_NAME}"
                        }catch(e){}

                        try{
                            sshCommand remote: remote, command: "docker network create ${APP_NETWORK} --driver=bridge"
                        }catch(e){}

                        sshCommand remote: remote, command: "docker run -itd  \
                            --hostname ${APP_NAME} \
                            -p ${APP_PORT}:${APP_PORT} \
                            --network ${APP_NETWORK} \
                            -v /app/${APP_NAME}/logs/:/app/logs/ \
                            -v /app/${APP_NAME}/.env:/app/.env \
                            --name ${APP_NAME} ${app_image}"
                    }
                }
            }
        }
        stage('Clean'){
            steps {
                script{
                    def remote = [:]
                    remote.name = APP_NAME
                    remote.host = HOST_IP
                    remote.allowAnyHosts = true
                    withCredentials([sshUserPrivateKey(credentialsId: HOST_CREDENTIAL, keyFileVariable: 'IDENTITY', usernameVariable: 'USERNAME')]) {

                        remote.user = USERNAME
                        remote.identityFile = IDENTITY

                        try{
                            sshCommand remote: remote, command: "docker container prune -f"
                        }catch(e){}

                        try{
                            sshCommand remote: remote, command: "docker rmi \$(docker images ${APP_NAME} -q) -f"
                        }catch(e){}
                    }

                    try{
                        sh "docker container prune -f"
                    }catch(e){}

                    try{
                        sh "docker rmi \$(docker images ${APP_NAME} -q) -f"
                    }catch(e){}
                }
            }
        }
    }
}